#include <string>
#include <iostream>
#include <cstdlib>
#include <vector>
#include <cmath>
#include <sstream>
using namespace std;

//parcing & converting function
vector <vector< float> > parcing(string input1 , float &rows1 , float &columns1)
{
	//initilizing variables of mat1
	vector <vector <float> > mat1;
	vector <float> data1;
	float spaces1 = 0, semicolons1 = 0;

	//converting & parcing of input1
	  //loop on each element in it
	for (int n = 0; n < input1.length(); n++)
	{
		//element is string which will be converted
		string element;
		float elem;

		// start & end are the limits which contains numbers inbetween
		int start, end;

		//getting start
		if (input1[n] == '[' || input1[n] == ' ' || input1[n] == ';')
		{
			start = n + 1;

			//loop to get end
			for (int b = (n + 1); b < input1.length(); b++)
			{
				if (input1[b] == ';' || input1[b] == ']' || input1[b] == ' ')
				{
					end = b - 1;
					break;
				}
			}

			//filling element
			element = input1.substr(start, (end - (start - 1)));
			elem = atof(element.c_str());
			data1.push_back(elem);

		}
		//counting spaces & semi colons
		if (input1[n] == ';')
		{
			semicolons1++;
		}
	}
	//calculating no of rows & columns for mat1
	for (int n = 0; input1[n] != ';'; n++)
	{
		if (input1[n] == ' ')
		{
			spaces1++;
		}
	}
	columns1 = spaces1 + 1;
	rows1 = semicolons1 + 1;

	//filling mat1
	  //m1 is itterator for data1
	int m1 = 0;
	for (int i1 = 0; i1 < rows1; i1++)
	{
		mat1.push_back(vector<float>());
		for (int j1 = 0; j1 < columns1; j1++)
		{
			mat1[i1].push_back(data1[m1]);
			m1++;
		}
	}

	return mat1;
}

//printing function
void matprint(vector<vector<float> > mat)
{
	//loop to print the sum
	cout << '[';
	for (int i = 0; i < mat.size(); i++)
	{
		for (int j = 0; j < mat[0].size(); j++)
		{
			cout << mat[i][j];
			if (j != (mat[0].size() - 1))
				cout << " ";
		}
		if (i != (mat.size() - 1))
			cout << ';';
	}
	cout << ']';
}

//summation function
vector <vector< float> > sum(vector<vector<float> > &mat1, vector<vector<float> > &mat2)
{
	//initializing returning vector
	vector<vector<float> > matsum;
	
	//loop to sum
	for (int i = 0; i < mat1.size(); i++)
	{
		matsum.push_back(vector<float>());
		for (int j = 0; j < mat1[0].size(); j++)
		{
			matsum[i].push_back(mat1[i][j] + mat2[i][j]);
		}
	}
	return matsum;
}

//difference function
vector <vector< float> > diff(vector<vector<float> > &mat1, vector<vector<float> > &mat2)
{
	//initializing returning vector
	vector <vector< float> > matdiff;

	//loop to minus
	for (int i = 0; i < mat1.size(); i++)
	{
		matdiff.push_back(vector<float>());
		for (int j = 0; j < mat1[0].size(); j++)
		{
			matdiff[i].push_back(mat1[i][j] - mat2[i][j]);
		}
	}
	return matdiff;
}

//multiplication function
vector<vector<float> > mult(vector<vector<float> > &mat1, vector<vector<float> > &mat2)
{
	vector <float> sum;
	vector <vector<float> > matmult;

	//multiplying matrices & saving results in 1D vector
	for (int r = 0; r < mat1.size(); r++)
	{
		for (int i = 0; i < mat2[0].size(); i++)
		{
			float result = 0;
			for (int j = 0; j < mat2.size(); j++)
			{
				result += mat1[r][j] * mat2[j][i];
			}
			sum.push_back(result);
		}
	}

	//filling matmult the 2D vector
	int m1 = 0;
	for (int i1 = 0; i1 < mat1.size(); i1++)
	{
		matmult.push_back(vector<float>());
		for (int j1 = 0; j1 < mat2[0].size(); j1++)
		{
			matmult[i1].push_back(sum[m1]);
			m1++;
		}
	}
	return matmult;
}

int main()
{
	//initlialize variables of inputs
	string input1;
	string input2;
	char operat;
	float rows1;
	float columns1;
	float rows2;
	float columns2;

	//taking inputs
	getline(cin, input1);
	cin >> operat;
	cin.ignore();
	getline(cin, input2);

	//initilizing variables of mat1
	vector <vector <float> > mat1;
	//using parcing function
	mat1 = parcing(input1 ,rows1 ,columns1);


	//initilizing variables of mat2
	vector <vector <float> > mat2;
	//using parcing function
	mat2 = parcing(input2 ,rows2 ,columns2);

	if (operat == '+' || operat == '-' || operat == '*' || operat == '/')
	{
		if (rows1 != rows2 || columns1 != columns2)
		{
			cout << "ERROR";
			return 0;
		}
	}

	switch (operat)
	{
	default: cout << "ERROR";
		break;
	case '+': 
	{
		int flag = 0;
		for (int i = 0; i < mat1.size(); i++)
		{
			if (mat1[i].size() != mat2[i].size())
			{
				flag = 1;
				break;
			}
		}
		if (mat1.size() != mat2.size() || flag == 1)
		{
			cout << "ERROR";

		}
		else
		{
			vector <vector< float> > matsum;

			//summation of mats
			matsum = sum(mat1, mat2);

			//printing the sum
			matprint(matsum);
			break;
		}
	}
	case '-':
	{
		int flag = 0;
		for (int i = 0; i < mat1.size(); i++)
		{
			if (mat1[i].size() != mat2[i].size())
			{
				flag = 1;
				break;
			}
		}
		if (mat1.size() != mat2.size() || flag == 1)
		{
			cout << "ERROR";
		}
		else
	{
			vector <vector< float> > matdiff;

		//difference of mats
		matdiff = diff(mat1, mat2);

		//printing the difference
		matprint(matdiff);
		break;
	}
	}
	case '*':
	{
		//flag to check no of columns = no of rows
		int flag = 0;
		for (int i = 0; i < mat1.size(); i++)
		{
			if (mat1[i].size() != mat2.size())
			{
				flag = 1;
				break;
			}
		}
		if (flag == 1)
		{
			cout << "ERROR";
		}
		else
		{
			vector <vector<float> > matmult;

			//multiplication of mats
			matmult = mult(mat1, mat2);

			//printing the multiplication
			matprint(matmult);

			break;
		}
	}

	}

	return 0;
}

